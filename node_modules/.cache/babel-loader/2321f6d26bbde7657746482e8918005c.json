{"ast":null,"code":"// lazyload\n(function (window, factory) {\n  // universal module definition\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['./flickity', 'fizzy-ui-utils/utils'], function (Flickity, utils) {\n      return factory(window, Flickity, utils);\n    });\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('./flickity'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window, window.Flickity, window.fizzyUIUtils);\n  }\n})(window, function factory(window, Flickity, utils) {\n  'use strict';\n\n  Flickity.createMethods.push('_createLazyload');\n  var proto = Flickity.prototype;\n\n  proto._createLazyload = function () {\n    this.on('select', this.lazyLoad);\n  };\n\n  proto.lazyLoad = function () {\n    var lazyLoad = this.options.lazyLoad;\n\n    if (!lazyLoad) {\n      return;\n    } // get adjacent cells, use lazyLoad option for adjacent count\n\n\n    var adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;\n    var cellElems = this.getAdjacentCellElements(adjCount); // get lazy images in those cells\n\n    var lazyImages = [];\n    cellElems.forEach(function (cellElem) {\n      var lazyCellImages = getCellLazyImages(cellElem);\n      lazyImages = lazyImages.concat(lazyCellImages);\n    }); // load lazy images\n\n    lazyImages.forEach(function (img) {\n      new LazyLoader(img, this);\n    }, this);\n  };\n\n  function getCellLazyImages(cellElem) {\n    // check if cell element is lazy image\n    if (cellElem.nodeName == 'IMG') {\n      var lazyloadAttr = cellElem.getAttribute('data-flickity-lazyload');\n      var srcAttr = cellElem.getAttribute('data-flickity-lazyload-src');\n      var srcsetAttr = cellElem.getAttribute('data-flickity-lazyload-srcset');\n\n      if (lazyloadAttr || srcAttr || srcsetAttr) {\n        return [cellElem];\n      }\n    } // select lazy images in cell\n\n\n    var lazySelector = 'img[data-flickity-lazyload], ' + 'img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]';\n    var imgs = cellElem.querySelectorAll(lazySelector);\n    return utils.makeArray(imgs);\n  } // -------------------------- LazyLoader -------------------------- //\n\n  /**\n   * class to handle loading images\n   * @param {Image} img - Image element\n   * @param {Flickity} flickity - Flickity instance\n   */\n\n\n  function LazyLoader(img, flickity) {\n    this.img = img;\n    this.flickity = flickity;\n    this.load();\n  }\n\n  LazyLoader.prototype.handleEvent = utils.handleEvent;\n\n  LazyLoader.prototype.load = function () {\n    this.img.addEventListener('load', this);\n    this.img.addEventListener('error', this); // get src & srcset\n\n    var src = this.img.getAttribute('data-flickity-lazyload') || this.img.getAttribute('data-flickity-lazyload-src');\n    var srcset = this.img.getAttribute('data-flickity-lazyload-srcset'); // set src & serset\n\n    this.img.src = src;\n\n    if (srcset) {\n      this.img.setAttribute('srcset', srcset);\n    } // remove attr\n\n\n    this.img.removeAttribute('data-flickity-lazyload');\n    this.img.removeAttribute('data-flickity-lazyload-src');\n    this.img.removeAttribute('data-flickity-lazyload-srcset');\n  };\n\n  LazyLoader.prototype.onload = function (event) {\n    this.complete(event, 'flickity-lazyloaded');\n  };\n\n  LazyLoader.prototype.onerror = function (event) {\n    this.complete(event, 'flickity-lazyerror');\n  };\n\n  LazyLoader.prototype.complete = function (event, className) {\n    // unbind events\n    this.img.removeEventListener('load', this);\n    this.img.removeEventListener('error', this);\n    var cell = this.flickity.getParentCell(this.img);\n    var cellElem = cell && cell.element;\n    this.flickity.cellSizeChange(cellElem);\n    this.img.classList.add(className);\n    this.flickity.dispatchEvent('lazyLoad', event, cellElem);\n  }; // -----  ----- //\n\n\n  Flickity.LazyLoader = LazyLoader;\n  return Flickity;\n});","map":{"version":3,"sources":["C:/Users/LabJH/Documents/yamir/cit/minaposento/node_modules/flickity/js/lazyload.js"],"names":["window","factory","define","amd","Flickity","utils","module","exports","require","fizzyUIUtils","createMethods","push","proto","prototype","_createLazyload","on","lazyLoad","options","adjCount","cellElems","getAdjacentCellElements","lazyImages","forEach","cellElem","lazyCellImages","getCellLazyImages","concat","img","LazyLoader","nodeName","lazyloadAttr","getAttribute","srcAttr","srcsetAttr","lazySelector","imgs","querySelectorAll","makeArray","flickity","load","handleEvent","addEventListener","src","srcset","setAttribute","removeAttribute","onload","event","complete","onerror","className","removeEventListener","cell","getParentCell","element","cellSizeChange","classList","add","dispatchEvent"],"mappings":"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","sourcesContent":["// lazyload\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './flickity',\n      'fizzy-ui-utils/utils',\n    ], function( Flickity, utils ) {\n      return factory( window, Flickity, utils );\n    } );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n        window,\n        require('./flickity'),\n        require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    factory(\n        window,\n        window.Flickity,\n        window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, Flickity, utils ) {\n'use strict';\n\nFlickity.createMethods.push('_createLazyload');\nvar proto = Flickity.prototype;\n\nproto._createLazyload = function() {\n  this.on( 'select', this.lazyLoad );\n};\n\nproto.lazyLoad = function() {\n  var lazyLoad = this.options.lazyLoad;\n  if ( !lazyLoad ) {\n    return;\n  }\n  // get adjacent cells, use lazyLoad option for adjacent count\n  var adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;\n  var cellElems = this.getAdjacentCellElements( adjCount );\n  // get lazy images in those cells\n  var lazyImages = [];\n  cellElems.forEach( function( cellElem ) {\n    var lazyCellImages = getCellLazyImages( cellElem );\n    lazyImages = lazyImages.concat( lazyCellImages );\n  } );\n  // load lazy images\n  lazyImages.forEach( function( img ) {\n    new LazyLoader( img, this );\n  }, this );\n};\n\nfunction getCellLazyImages( cellElem ) {\n  // check if cell element is lazy image\n  if ( cellElem.nodeName == 'IMG' ) {\n    var lazyloadAttr = cellElem.getAttribute('data-flickity-lazyload');\n    var srcAttr = cellElem.getAttribute('data-flickity-lazyload-src');\n    var srcsetAttr = cellElem.getAttribute('data-flickity-lazyload-srcset');\n    if ( lazyloadAttr || srcAttr || srcsetAttr ) {\n      return [ cellElem ];\n    }\n  }\n  // select lazy images in cell\n  var lazySelector = 'img[data-flickity-lazyload], ' +\n    'img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]';\n  var imgs = cellElem.querySelectorAll( lazySelector );\n  return utils.makeArray( imgs );\n}\n\n// -------------------------- LazyLoader -------------------------- //\n\n/**\n * class to handle loading images\n * @param {Image} img - Image element\n * @param {Flickity} flickity - Flickity instance\n */\nfunction LazyLoader( img, flickity ) {\n  this.img = img;\n  this.flickity = flickity;\n  this.load();\n}\n\nLazyLoader.prototype.handleEvent = utils.handleEvent;\n\nLazyLoader.prototype.load = function() {\n  this.img.addEventListener( 'load', this );\n  this.img.addEventListener( 'error', this );\n  // get src & srcset\n  var src = this.img.getAttribute('data-flickity-lazyload') ||\n    this.img.getAttribute('data-flickity-lazyload-src');\n  var srcset = this.img.getAttribute('data-flickity-lazyload-srcset');\n  // set src & serset\n  this.img.src = src;\n  if ( srcset ) {\n    this.img.setAttribute( 'srcset', srcset );\n  }\n  // remove attr\n  this.img.removeAttribute('data-flickity-lazyload');\n  this.img.removeAttribute('data-flickity-lazyload-src');\n  this.img.removeAttribute('data-flickity-lazyload-srcset');\n};\n\nLazyLoader.prototype.onload = function( event ) {\n  this.complete( event, 'flickity-lazyloaded' );\n};\n\nLazyLoader.prototype.onerror = function( event ) {\n  this.complete( event, 'flickity-lazyerror' );\n};\n\nLazyLoader.prototype.complete = function( event, className ) {\n  // unbind events\n  this.img.removeEventListener( 'load', this );\n  this.img.removeEventListener( 'error', this );\n\n  var cell = this.flickity.getParentCell( this.img );\n  var cellElem = cell && cell.element;\n  this.flickity.cellSizeChange( cellElem );\n\n  this.img.classList.add( className );\n  this.flickity.dispatchEvent( 'lazyLoad', event, cellElem );\n};\n\n// -----  ----- //\n\nFlickity.LazyLoader = LazyLoader;\n\nreturn Flickity;\n\n} ) );\n"]},"metadata":{},"sourceType":"script"}